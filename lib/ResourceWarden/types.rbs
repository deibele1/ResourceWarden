# Transparent wrapper class ignores requests from any caller other than the current owner
module ResourceWarden
  class ResourceCell
    def initialize: (untyped) -> void
    def get_key: -> void
    private def owner: -> Thread
    private def chown: (Thread) -> void
    private def method_missing: (Symbol | String, *untyped) -> untyped
    private def respond_to_missing?: (Symbol | String, *untyped) -> bool

    class Unlock
      def initialize: () -> void
    end
  end

  class Warden
    def intialize: (*ResourceCell) -> void
    def synchronize: () { () -> BasicObject } -> void
    def add: (ResourceCell) -> void
    def resources: () -> Array[ResourceCell]
    def self.synchronize:(*ResourceCell) { () -> BasicObject } -> void
    def self.create:(untyped) -> ResourceCell | () { () -> Object } -> ResourceCell
  end

  class Key
    def initialize: () {() -> ResourceCell::Unlock } -> void
    def use: () -> void
  end
end